import RPi.GPIO as GPIO
import time

# GPIO 핀 설정
motor_pin1 = 17  # IN1
motor_pin2 = 27  # IN2
pwm_pin = 18     # ENA (PWM 제어 핀)
trig_pin = 23    # 초음파 센서 트리거 핀
echo_pin = 24    # 초음파 센서 에코 핀
buzzer_pin = 22  # 부저 핀

# 임계값 설정
distance_threshold = 10  # 거리 임계값 (단위: cm)

# GPIO 초기화
GPIO.setmode(GPIO.BCM)
GPIO.setup(motor_pin1, GPIO.OUT)
GPIO.setup(motor_pin2, GPIO.OUT)
GPIO.setup(pwm_pin, GPIO.OUT)
GPIO.setup(trig_pin, GPIO.OUT)
GPIO.setup(echo_pin, GPIO.IN)
GPIO.setup(buzzer_pin, GPIO.OUT)

# PWM 설정 (주파수 100Hz)
pwm = GPIO.PWM(pwm_pin, 100)
pwm.start(0)  # 초기 속도 0%

# 초음파 센서로 거리 측정
def measure_distance():
    # 트리거 신호 발생
    GPIO.output(trig_pin, GPIO.HIGH)
    time.sleep(0.00001)
    GPIO.output(trig_pin, GPIO.LOW)
   
    # Echo 핀이 HIGH가 될 때까지 대기
    while GPIO.input(echo_pin) == 0:
        start_time = time.time()
   
    # Echo 핀이 LOW가 될 때까지 대기
    while GPIO.input(echo_pin) == 1:
        end_time = time.time()

    # 초음파가 물체에 닿아 돌아오는 시간 계산
    elapsed_time = end_time - start_time
   
    # 거리 계산 (소리의 속도는 34300 cm/s)
    distance = (elapsed_time * 34300) / 2
   
    return distance

# 모터 제어 함수
def set_motor(x_value, index):
    # 방향 설정
    if x_value > 0:
        GPIO.output(motor_pin1, GPIO.HIGH)
        GPIO.output(motor_pin2, GPIO.LOW)  # 시계방향
        direction = "시계"
    else:
        GPIO.output(motor_pin1, GPIO.LOW)
        GPIO.output(motor_pin2, GPIO.HIGH)  # 반시계방향
        direction = "반시계"
       
    # PWM 값 설정 (0 ~ 100%)
    pwm_value = min(max(abs(x_value) * 100, 0), 100)
    pwm.ChangeDutyCycle(pwm_value)
    print(f"방향: {direction}, pwm 값:{pwm_value:.2f}%")
    #print(f"{index}번:{x_value:.3f}, 방향: {direction}, pwm 값:{pwm_value:.2f}%")

# 벡터 리스트
vector_list = [
    (-0.119844, 0.992793), (-0.492301, 0.870425), (-0.121241, 0.992623), (0.445911, 0.895077),
    (-0.101689, 0.994816), (0.366548, 0.930404), (-0.211878, 0.977301), (0.309008, 0.951067),
    (0.351490, 0.936194), (-0.119098, 0.992876), (-0.098541, 0.995134), (-0.237614, 0.971361),
    (0.272308, 0.962214), (-0.252658, 0.967554), (-0.274880, 0.961468), (0.251595, 0.967837),
    (0.285091, 0.958503), (0.087678, 0.996148), (0.419472, 0.907771), (-0.274008, 0.961714),
    (0.347855, 0.937548), (0.377819, 0.925883), (0.355219, 0.934785), (-0.227155, 0.973856),
    (0.127631, 0.991823), (-0.280871, 0.959739), (-0.203046, 0.979160), (-0.236505, 0.971630),
    (-0.252546, 0.967586), (0.411084, 0.911588), (0.973781, 0.227538), (0.258731, 0.965957),
    (0.834152, 0.551530), (0.757624, 0.652691), (0.933441, 0.358684), (0.779217, 0.626738),
    (0.865015, 0.501788), (0.978621, 0.205690), (0.969635, 0.244501), (0.787872, 0.615850),
    (0.871564, 0.490292), (0.984582, 0.175101), (0.930920, 0.365205), (0.961804, 0.273710),
    (0.824872, 0.565301), (0.837949, 0.545744), (0.909687, 0.415277), (0.968952, 0.247183),
    (0.933775, 0.357885), (0.879072, 0.476673), (0.959154, 0.282986), (0.906846, 0.421426),
    (0.907517, 0.420068), (0.804601, 0.593812), (0.861508, 0.507779), (0.827429, 0.561557),
    (0.987939, 0.154779), (0.966913, 0.255061), (0.933622, 0.358285), (0.989168, 0.146799),
    (0.911524, 0.411234), (0.986346, 0.164755), (0.781344, 0.624080), (0.827715, 0.561210),
    (0.782193, 0.622986), (0.887902, 0.460069), (0.811927, 0.583800), (0.783927, 0.620871),
    (0.812286, 0.583247), (0.998097, 0.061938), (0.882889, 0.469568), (0.949831, 0.312766),
    (0.807484, 0.589911), (0.990025, 0.140956), (0.937928, 0.346836), (0.937194, 0.348822),
    (0.799496, 0.600642), (0.983786, 0.179274), (0.888270, 0.459350), (0.998717, 0.050559),
    (0.992028, 0.126006), (0.996275, 0.086261), (0.911199, 0.411954), (0.832018, 0.554707),
    (0.993393, 0.114899), (0.935087, 0.354418), (0.815979, 0.578085), (0.978735, 0.205094),
    (0.797773, 0.602950), (0.889655, 0.456630), (0.787136, 0.616755), (-0.673979, -0.738716),
    (-0.897099, -0.441838), (-0.999984, -0.005653), (-0.879940, -0.475115), (-0.787666, -0.616103),
    (-0.754214, -0.656603), (-0.674203, -0.738555), (-0.914336, -0.405013), (-0.789271, -0.613992),
    (-0.999858, -0.016808), (-0.805802, -0.592170), (-0.907618, -0.419859), (-0.909378, -0.416004),
    (-0.830581, -0.556907), (-0.852607, -0.522553), (-0.945583, -0.325426), (-0.990084, -0.140605),
    (-0.910111, -0.414378), (-0.969130, -0.246535), (-0.787941, -0.615742), (-0.968050, -0.250768),
    (-0.891768, -0.452509), (-0.965072, -0.261947), (-0.850186, -0.526486), (-0.852152, -0.523257),
    (-0.949844, -0.312731), (-0.990594, -0.136842), (-0.999344, -0.036136), (-0.783382, -0.621543),
    (-0.751308, -0.659930), (-0.966147, -0.258099), (-0.984713, -0.174457), (-0.809581, -0.587038),
    (-0.793831, -0.608163), (-0.910312, -0.414004), (-0.888404, -0.459085), (-0.753972, -0.656948),
    (-0.804013, -0.594641), (-0.874996, -0.484048), (-0.849551, -0.527489), (-0.905347, -0.424640),
    (-0.793504, -0.608603), (-0.990741, -0.135939), (-0.998197, -0.060212), (-0.947259, -0.320479),
    (-0.831860, -0.555028), (-0.799472, -0.600676), (-0.975671, -0.219248), (-0.849849, -0.526934),
    (-0.903262, -0.429106), (-0.907311, -0.420409), (-0.674683, -0.738122), (-0.841670, -0.540024),
    (-0.895960, -0.444100), (-0.976460, -0.215754), (-0.904836, -0.425748), (-0.823896, -0.566732)
]



# 1초마다 벡터의 x 값을 모터 제어에 사용
try:
    for index, vector in enumerate(vector_list, start=1):
        x_value = vector[0]  # 벡터의 x 값
        set_motor(x_value, index)   # 모터 제어

        # 초음파 센서로 거리 측정
        distance = measure_distance()
        print(f"측정된 거리: {distance:.2f} cm")

        # 거리가 임계값보다 작으면 부저 울리기
        if distance < distance_threshold:
            GPIO.output(buzzer_pin, GPIO.HIGH)
            print("부저 작동: 물체가 너무 가깝습니다!")
        else:
            GPIO.output(buzzer_pin, GPIO.LOW)

        time.sleep(0.1)  # 1초 대기
finally:
    pwm.stop()
    GPIO.cleanup()
